// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract CopeCoin is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, ERC20PermitUpgradeable, ERC20VotesUpgradeable {
    constructor() {
        __CopeCoin_init();
    }

    function __CopeCoin_init() internal initializer {
        __ERC20_init("CopeCoin", "COPE");
        __ERC20Burnable_init();
        __ERC20Snapshot_init();
        __Ownable_init();
        __Pausable_init();
        __ERC20Permit_init("CopeCoin");
        __ERC20Votes_init();

        _mint(msg.sender, 100000000 * 10 ** decimals());
    }

    function snapshot() public onlyOwner {
        _snapshot();
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override(ERC20Upgradeable, ERC20SnapshotUpgradeable)
    {
        super._beforeTokenTransfer(from, to, amount);
    }

    // The following functions are overrides required by Solidity.

    function _afterTokenTransfer(address from, address to, uint256 amount)
        internal
        override(ERC20Upgradeable, ERC20VotesUpgradeable)
    {
        super._afterTokenTransfer(from, to, amount);
    }

    function _mint(address to, uint256 amount)
        internal
        override(ERC20Upgradeable, ERC20VotesUpgradeable)
    {
        super._mint(to, amount);
    }

    function _burn(address account, uint256 amount)
        internal
        override(ERC20Upgradeable, ERC20VotesUpgradeable)
    {
        super._burn(account, amount);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract CopeCoin is Context, IERC20, Ownable, Pausable, ReentrancyGuard {
    using SafeMath for uint256;
    using Address for address;

    string public name = "CopeCoin";
    string public symbol = "COPE";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _lockedBalances;

    uint256 private _totalLockedTokens;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event TokensLocked(address indexed holder, uint256 amount);
    event TokensUnlocked(address indexed holder, uint256 amount);

    modifier onlyValidAddress(address addr) {
        require(addr != address(0), "Invalid address");
        _;
    }

    modifier onlyHolder(address account) {
        require(_balances[account] > 0, "Not a token holder");
        _;
    }

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10**uint256(decimals);
        _balances[_msgSender()] = totalSupply;
        emit Transfer(address(0), _msgSender(), totalSupply);
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override whenNotPaused returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }

    function lockTokens(uint256 amount) public whenNotPaused onlyHolder(_msgSender()) {
        _balances[_msgSender()] = _balances[_msgSender()].sub(amount, "Insufficient balance");
        _lockedBalances[_msgSender()] = _lockedBalances[_msgSender()].add(amount);
        _totalLockedTokens = _totalLockedTokens.add(amount);
        emit TokensLocked(_msgSender(), amount);
    }

    function unlockTokens(uint256 amount) public whenNotPaused onlyHolder(_msgSender()) {
        require(_lockedBalances[_msgSender()] >= amount, "Insufficient locked balance");
        _lockedBalances[_msgSender()] = _lockedBalances[_msgSender()].sub(amount);
        _balances[_msgSender()] = _balances[_msgSender()].add(amount);
        _totalLockedTokens = _totalLockedTokens.sub(amount);
        emit TokensUnlocked(_msgSender(), amount);
    }

    function getLockedBalance(address account) public view onlyValidAddress(account) returns (uint256) {
        return _lockedBalances[account];
    }

    function getTotalLockedTokens() public view returns (uint256) {
        return _totalLockedTokens;
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function withdrawFunds(address to, uint256 amount) public onlyOwner nonReentrant {
        require(to != address(0), "Invalid address");
        require(address(this).balance >= amount, "Insufficient contract balance");
        Address.sendValue(payable(to), amount);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract CopeCoin is Context, IERC20, Ownable {
    using Address for address;

    string public name = "CopeCoin";
    string public symbol = "COPE";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _lockedBalances;

    uint256 private _totalLockedTokens;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event TokensLocked(address indexed holder, uint256 amount);
    event TokensUnlocked(address indexed holder, uint256 amount);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10**uint256(decimals);
        _balances[_msgSender()] = totalSupply;
        emit Transfer(address(0), _msgSender(), totalSupply);
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }

    function lockTokens(uint256 amount) public {
        address holder = _msgSender();
        require(_balances[holder] >= amount, "Insufficient balance");
        _balances[holder] -= amount;
        _lockedBalances[holder] += amount;
        _totalLockedTokens += amount;
        emit TokensLocked(holder, amount);
    }

    function unlockTokens(uint256 amount) public {
        address holder = _msgSender();
        require(_lockedBalances[holder] >= amount, "Insufficient locked balance");
        _lockedBalances[holder] -= amount;
        _balances[holder] += amount;
        _totalLockedTokens -= amount;
        emit TokensUnlocked(holder, amount);
    }

    function getLockedBalance(address account) public view returns (uint256) {
        return _lockedBalances[account];
    }

    function getTotalLockedTokens() public view returns (uint256) {
        return _totalLockedTokens;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
}

interface IBTCBridge {
    // Define the functions needed to bridge Bitcoin to Ethereum
    // These functions might vary depending on the bridging solution used
    function lockTokens(address receiver, uint256 amount) external;
    function unlockTokens(uint256 amount) external;
}

contract CopeCoin {
    string public name = "CopeCoin";
    string public symbol = "COPE";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;

    address public ethBridgeAddress; // Address of the Ethereum-BSC bridge
    address public bscBridgeAddress; // Address of the BSC-Ethereum bridge
    address public btcBridgeAddress; // Address of the Bitcoin-Ethereum bridge

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply;
        balanceOf[msg.sender] = initialSupply;
    }

    function setEthBridgeAddress(address bridge) external {
        ethBridgeAddress = bridge;
    }

    function setBscBridgeAddress(address bridge) external {
        bscBridgeAddress = bridge;
    }

    function setBtcBridgeAddress(address bridge) external {
        btcBridgeAddress = bridge;
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);

        // Transfer tokens to the other blockchain through the bridges
        if (ethBridgeAddress != address(0)) {
            IERC20(ethBridgeAddress).transfer(to, value);
        } else if (bscBridgeAddress != address(0)) {
            IERC20(bscBridgeAddress).transfer(to, value);
        } else if (btcBridgeAddress != address(0)) {
            // Assuming the bridging solution for Bitcoin uses IBTCBridge interface
            IBTCBridge(btcBridgeAddress).lockTokens(to, value);
        }

        return true;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract CopeCoin is Context, IERC20, Ownable, Pausable, ReentrancyGuard {
    using SafeMath for uint256;
    using Address for address;

    string public name = "CopeCoin";
    string public symbol = "COPE";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    uint256 private _maxTransferAmount;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _lockedBalances;

    uint256 private _totalLockedTokens;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event TokensLocked(address indexed holder, uint256 amount);
    event TokensUnlocked(address indexed holder, uint256 amount);

    modifier onlyValidAddress(address addr) {
        require(addr != address(0), "Invalid address");
        _;
    }

    modifier onlyHolder(address account) {
        require(_balances[account] > 0, "Not a token holder");
        _;
    }

    modifier onlyOwnerOrCreator() {
        require(
            _msgSender() == owner() || _msgSender() == address(this), // Allow the contract itself to set the limit
            "Only the owner or creator can perform this action"
        );
        _;
    }

    constructor(uint256 initialSupply, uint256 maxTransferAmount) {
        totalSupply = initialSupply * 10**uint256(decimals);
        _maxTransferAmount = maxTransferAmount * 10**uint256(decimals);
        _balances[_msgSender()] = totalSupply;
        emit Transfer(address(0), _msgSender(), totalSupply);
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override whenNotPaused returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }

    function lockTokens(uint256 amount) public whenNotPaused onlyHolder(_msgSender()) {
        _balances[_msgSender()] = _balances[_msgSender()].sub(amount, "Insufficient balance");
        _lockedBalances[_msgSender()] = _lockedBalances[_msgSender()].add(amount);
        _totalLockedTokens = _totalLockedTokens.add(amount);
        emit TokensLocked(_msgSender(), amount);
    }

    function unlockTokens(uint256 amount) public whenNotPaused onlyHolder(_msgSender()) {
        require(_lockedBalances[_msgSender()] >= amount, "Insufficient locked balance");
        _lockedBalances[_msgSender()] = _lockedBalances[_msgSender()].sub(amount);
        _balances[_msgSender()] = _balances[_msgSender()].add(amount);
        _totalLockedTokens = _totalLockedTokens.sub(amount);
        emit TokensUnlocked(_msgSender(), amount);
    }

    function getLockedBalance(address account) public view onlyValidAddress(account) returns (uint256) {
        return _lockedBalances[account];
    }

    function getTotalLockedTokens() public view returns (uint256) {
        return _totalLockedTokens;
    }

    function pause() public onlyOwnerOrCreator {
        _pause();
    }

    function unpause() public onlyOwnerOrCreator {
        _unpause();
    }

    function withdrawFunds(address to, uint256 amount) public onlyOwnerOrCreator nonReentrant {
        require(to != address(0), "Invalid address");
        require(address(this).balance >= amount, "Insufficient contract balance");
        Address.sendValue(payable(to), amount);
    }

    function setMaxTransferAmount(uint256 amount) public onlyOwnerOrCreator {
        _maxTransferAmount = amount * 10**uint256(decimals);
    }

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

contract CopeCoin {
    string public name = "CopeCoin";
    string public symbol = "COPE";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    uint256 private _maxTransferAmount;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _lockedBalances;
    uint256 private _totalLockedTokens;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event TokensLocked(address indexed holder, uint256 amount);
    event TokensUnlocked(address indexed holder, uint256 amount);

    constructor(uint256 initialSupply, uint256 maxTransferAmount) {
        totalSupply = initialSupply * 10**uint256(decimals);
        _maxTransferAmount = maxTransferAmount * 10**uint256(decimals);
        _balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function lockTokens(uint256 amount) external {
        _lockTokens(_msgSender(), amount);
    }

    function unlockTokens(uint256 amount) external {
        _unlockTokens(_msgSender(), amount);
    }

    function getLockedBalance(address account) external view returns (uint256) {
        return _lockedBalances[account];
    }

    function getTotalLockedTokens() external view returns (uint256) {
        return _totalLockedTokens;
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function withdrawFunds(address to, uint256 amount) external onlyOwner {
        _withdrawFunds(to, amount);
    }

    function setMaxTransferAmount(uint256 amount) external onlyOwner {
        _maxTransferAmount = amount * 10**uint256(decimals);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");

        if (sender != owner()) {
            require(amount <= _maxTransferAmount, "Exceeds maximum transfer amount");
        }

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _lockTokens(address holder, uint256 amount) private onlyHolder(holder) {
        require(amount > 0, "Lock amount must be greater than zero");
        require(_balances[holder] >= amount, "Insufficient balance");

        _balances[holder] -= amount;
        _lockedBalances[holder] += amount;
        _totalLockedTokens += amount;

        emit TokensLocked(holder, amount);
    }

    function _unlockTokens(address holder, uint256 amount) private onlyHolder(holder) {
        require(amount > 0, "Unlock amount must be greater than zero");
        require(_lockedBalances[holder] >= amount, "Insufficient locked balance");

        _lockedBalances[holder] -= amount;
        _balances[holder] += amount;
        _totalLockedTokens -= amount;

        emit TokensUnlocked(holder, amount);
    }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _pause() internal {
        paused = true;
        emit Paused(_msgSender());
    }

    function _unpause() internal {
        paused = false;
        emit Unpaused(_msgSender());
    }

    function _withdrawFunds(address to, uint256 amount) internal {
        require(to != address(0), "Invalid address");
        require(address(this).balance >= amount, "Insufficient contract balance");
        Address.sendValue(payable(to), amount);
    }

    bool private paused;
    event Paused(address account);
    event Unpaused(address account);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CopeCoin is ERC20, Ownable {
    uint256 private constant TOTAL_SUPPLY = 1_000_000_000_000 * 10**18;
    uint256 private constant LIQUIDITY_ALLOCATION = 340_000_000_000 * 10**18;
    uint256 private constant CEX_ALLOCATION = 240_000_000_000 * 10**18;
    uint256 private constant MARKETING_ALLOCATION = 100_000_000_000 * 10**18;
    uint256 private constant HEDGEFUND_ALLOCATION = 100_000_000_000 * 10**18;
    uint256 private constant PROJECT_DEV_ALLOCATION = 3_000_000_000 * 10**18;
    uint256 private constant BLOCKCHAIN_DEV_ALLOCATION = 100_000_000_000 * 10**18;
    uint256 private constant FOUNDER_ALLOCATION = TOTAL_SUPPLY * 77 / 1000;
    uint256 private constant TAX_PERCENTAGE = 1;
    uint256 private constant TAX_TOKENS_PER_AMOUNT = 1000000;
    uint256 private constant INITIAL_LIQUIDATION = 10_000_000_000 * 10**18;
    uint256 private constant REINVESTMENT_ALLOCATION = 130_000_000_000 * 10**18;

    address private founderAddress;
    uint256 private totalTaxCollected;

    constructor() ERC20("CopeCoin", "COPE") {
        founderAddress = msg.sender;
        _mint(address(this), TOTAL_SUPPLY);
        _transfer(address(this), owner(), INITIAL_LIQUIDATION);
        _transfer(address(this), founderAddress, FOUNDER_ALLOCATION);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        // Apply tax if the sender is not the owner
        if (msg.sender != owner() && amount >= TAX_TOKENS_PER_AMOUNT) {
            uint256 taxAmount = amount * TAX_PERCENTAGE / 100;
            totalTaxCollected += taxAmount;
            amount -= taxAmount;
        }
        return super.transfer(recipient, amount);
    }

    function getTotalTaxCollected() public view returns (uint256) {
        return totalTaxCollected;
    }

    function reinvest() external onlyOwner {
        _transfer(owner(), address(this), REINVESTMENT_ALLOCATION);
    }
}
